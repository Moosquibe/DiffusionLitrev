###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################
"Bazel build for Retro Diffusion"

module(
    name = "retrodiffusion",
    version = "0.0.0",
)

################
## Buildifier ##
################
bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

############
## PYTHON ##
############
RULES_PYTHON_VERSION = "0.31.0"

PYTHON_VERSION = "3.11.7"

bazel_dep(name = "rules_python", version = RULES_PYTHON_VERSION)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = PYTHON_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//:requirements.txt",
    requirements_windows = "//:requirements_windows.txt",
)
use_repo(pip, "pip")

########################################
# Set up rules_js
########################################
bazel_dep(name = "aspect_rules_js", version = "1.38.0")

####### OPTIONAL: Customize Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
# bazel_dep(name = "rules_nodejs", version = "5.8.2")
# node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
# node.toolchain(node_version = "16.14.2")
#################################

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

use_repo(pnpm, "pnpm")
